import schedule
import time
from datetime import datetime, timedelta
import telebot
from telebot import TeleBot
from telebot import types

from utils import load_data, load_notifications, parse_time, save_data, save_notifications

def new_notification_handler(message, bot: TeleBot):
    markup = types.ForceReply(selective=False)
    bot.send_message(message.chat.id, 
                    "‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è | –≤—Ä–µ–º—è`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                    "‚Ä¢ `15:30` - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
                    "‚Ä¢ `14:25 25.12` - 25 –¥–µ–∫–∞–±—Ä—è –≤ 14:25\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞` - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç` - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", 
                    parse_mode='Markdown', reply_markup=markup)


def show_notifications_handler(message, bot: TeleBot, notifications: dict):
    NOTIFICATIONS_FILE = "notifications.json"
    user_id = str(message.from_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    notifications = load_notifications(NOTIFICATIONS_FILE)
    
    if user_id not in notifications or not notifications[user_id]:
        bot.send_message(message.chat.id, "üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return
    
    response = "‚è∞ **–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n\n"
    for i, notification in enumerate(notifications[user_id], 1):
        response += f"{i}. {notification['text']} - {notification['time']}\n"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def handle_notification_reply(message, bot: TeleBot):
    NOTIFICATIONS_FILE = "notifications.json"
    try:
        user_id = str(message.from_user.id)
        text = message.text.strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è
        if '|' not in text:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `—Ç–µ–∫—Å—Ç | –≤—Ä–µ–º—è`", parse_mode='Markdown')
            return
        
        notification_text, time_str = [part.strip() for part in text.split('|', 1)]
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        parsed_time = parse_time(time_str)
        if not parsed_time:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = load_notifications(NOTIFICATIONS_FILE)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in notifications:
            notifications[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        new_notif = {
            "text": notification_text,
            "time": parsed_time
        }
        notifications[user_id].append(new_notif)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        save_notifications(NOTIFICATIONS_FILE, notifications)
        
        bot.send_message(message.chat.id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìù {notification_text}\n‚è∞ {parsed_time}")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")































