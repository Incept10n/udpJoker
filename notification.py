import schedule
import time
from datetime import datetime, timedelta
import telebot
from telebot import TeleBot

from utils import load_data, parse_time, save_data

def handle_check_notifications(bot: TeleBot):
    # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö


    while True:
        try:
            current_time = datetime.now()
            
            for user_id, user_notifications in notifications.items():
                notifications_to_remove = []
                
                for i, notification in enumerate(user_notifications):
                    if notification.get('scheduled_time'):
                        scheduled_time = datetime.fromisoformat(notification['scheduled_time'])
                        if current_time >= scheduled_time:
                            try:
                                bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notification['text']}")
                                notifications_to_remove.append(i)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                                notifications_to_remove.append(i)
                
                # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for i in sorted(notifications_to_remove, reverse=True):
                    user_notifications.pop(i)
                
                if notifications_to_remove:
                    save_data(NOTIFICATIONS_FILE, notifications)
            
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_notifications: {e}")
            time.sleep(60)



def handle_notification_message(message, bot: TeleBot):
    NOTIFICATIONS_FILE = 'notifications.json'
    notifications = load_data(NOTIFICATIONS_FILE)

    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if message.reply_to_message and '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' in message.reply_to_message.text:
        try:
            if '|' in message.text:
                text_part, time_part = message.text.split('|', 1)
                notification_text = text_part.strip()
                time_str = time_part.strip()
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                notification_time = parse_time(time_str)
                
                if user_id not in notifications:
                    notifications[user_id] = []
                
                notifications[user_id].append({
                    'text': notification_text,
                    'time': time_str,
                    'scheduled_time': notification_time.isoformat() if notification_time else None
                })
                save_data(NOTIFICATIONS_FILE, notifications)
                
                bot.send_message(message.chat.id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìù {notification_text}\n‚è∞ {time_str}")
                
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `—Ç–µ–∫—Å—Ç | –≤—Ä–µ–º—è`", parse_mode='Markdown')
                
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")