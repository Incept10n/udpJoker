import time
from datetime import datetime
from telebot import TeleBot
from telebot import types
import pytz

from utils import load_notifications, parse_time, parse_time_to_datetime, save_notifications

def new_notification_handler(message, bot: TeleBot):
    markup = types.ForceReply(selective=False)
    bot.send_message(message.chat.id, 
                    "‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è | –≤—Ä–µ–º—è`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                    "‚Ä¢ `15:30` - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30 (–ú–°–ö)\n"
                    "‚Ä¢ `14:25 25.12` - 25 –¥–µ–∫–∞–±—Ä—è –≤ 14:25 (–ú–°–ö)\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞` - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ (–ú–°–ö)\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç` - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç (–ú–°–ö)", 
                    parse_mode='Markdown', reply_markup=markup)

def show_notifications_handler(message, bot: TeleBot, notifications: dict):
    NOTIFICATIONS_FILE = "notifications.json"
    user_id = str(message.from_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    notifications = load_notifications(NOTIFICATIONS_FILE)
    
    if user_id not in notifications or not notifications[user_id]:
        bot.send_message(message.chat.id, "üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return
    
    response = "‚è∞ **–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n\n"
    for i, notification in enumerate(notifications[user_id], 1):
        response += f"{i}. {notification['text']} - {notification['time']}\n"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def handle_notification_reply(message, bot: TeleBot):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/help')
    btn2 = types.KeyboardButton('/mylists')
    btn3 = types.KeyboardButton('/newnotification')
    btn4 = types.KeyboardButton('/mynotifications')
    markup.add(btn1, btn2, btn3, btn4)

    NOTIFICATIONS_FILE = "notifications.json"

    try:
        user_id = str(message.from_user.id)
        text = message.text.strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è
        if '|' not in text:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `—Ç–µ–∫—Å—Ç | –≤—Ä–µ–º—è`", parse_mode='Markdown', reply_markup=markup)
            return
        
        notification_text, time_str = [part.strip() for part in text.split('|', 1)]
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        parsed_time = parse_time(time_str)
        if not parsed_time:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", reply_markup=markup)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = load_notifications(NOTIFICATIONS_FILE)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in notifications:
            notifications[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        new_notif = {
            "text": notification_text,
            "time": parsed_time
        }
        notifications[user_id].append(new_notif)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        save_notifications(NOTIFICATIONS_FILE, notifications)
        
        bot.send_message(message.chat.id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìù {notification_text}\n‚è∞ {parsed_time}", reply_markup=markup)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=markup)


def handle_check_notifications(bot_instance: TeleBot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    moscow_tz = pytz.timezone('Europe/Moscow')

    while True:
        try:
            NOTIFICATIONS_FILE = "notifications.json"
            notifications = load_notifications(NOTIFICATIONS_FILE)
            now = datetime.now(moscow_tz)
            sent_notifications = []
            
            # Create a new dictionary for updated notifications
            updated_notifications = {}
            
            for user_id, user_notifications in notifications.items():
                notifications_to_keep = []
                
                for notification in user_notifications:
                    notification_time = parse_time_to_datetime(notification['time'], moscow_tz)
                    
                    if notification_time:
                        time_diff = (now - notification_time).total_seconds()
                        if -30 <= time_diff <= 30:
                            try:
                                bot_instance.send_message(
                                    int(user_id), 
                                    f"‚è∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** {notification['text']}",
                                    parse_mode='Markdown'
                                )
                                sent_notifications.append({
                                    'user_id': user_id,
                                    'text': notification['text']
                                })
                                continue
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                notifications_to_keep.append(notification)
                        else:
                            notifications_to_keep.append(notification)
                    else:
                        notifications_to_keep.append(notification)
                
                # Only keep users who still have notifications
                if notifications_to_keep:
                    updated_notifications[user_id] = notifications_to_keep
            
            # Replace the old notifications with the updated ones
            notifications = updated_notifications
            save_notifications(NOTIFICATIONS_FILE, notifications)
            
            if sent_notifications:
                print(f"[{now.strftime('%H:%M:%S')} –ú–°–ö] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(sent_notifications)}")
                for sent in sent_notifications:
                    print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sent['user_id']}: {sent['text']}")
            
            time.sleep(15)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            time.sleep(60)