import telebot
from telebot import types
import json
import os
import threading
from datetime import datetime, timedelta
from help import handlel_send_help
from lists import handle_show_my_lists
from notification import handle_check_notifications, handle_notification_message
from utils import load_data


TELEGRAM_API_TOKEN = os.environ['TELEGRAM_API_TOKEN']
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_API_TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
LISTS_FILE = 'lists.json'
NOTIFICATIONS_FILE = 'notifications.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
notifications = load_data(NOTIFICATIONS_FILE)
users = load_data(USERS_FILE)
lists = load_data(LISTS_FILE)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # user_id = str(message.from_user.id)
    
    # if user_id not in users:
    #     users[user_id] = {
    #         'username': message.from_user.username,
    #         'first_name': message.from_user.first_name,
    #         'lists': {}
    #     }
    #     save_data(USERS_FILE, users)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/help')
    btn2 = types.KeyboardButton('/mylists')
    btn3 = types.KeyboardButton('/newnotification')
    btn4 = types.KeyboardButton('/mynotifications')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, 
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n\n"
                    "üìù –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /[–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞]\n"
                    "üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /newnotification\n"
                    "üìã –°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /mylists\n\n"
                    "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", 
                    reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_help(message):
    handlel_send_help(message, bot)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
@bot.message_handler(commands=['mylists'])
def show_my_lists(message):
    handle_show_my_lists(message, bot, lists)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('show_list_'))
def show_list_callback(call):
    list_name = call.data.replace('show_list_', '')
    user_id = str(call.from_user.id)
    
    if user_id in users and list_name in users[user_id]['lists']:
        items = users[user_id]['lists'][list_name]
        if not items:
            bot.send_message(call.message.chat.id, f"üì≠ –°–ø–∏—Å–æ–∫ '{list_name}' –ø—É—Å—Ç.")
            return
        
        response = f"üìã **–°–ø–∏—Å–æ–∫: {list_name}**\n\n"
        for i, item in enumerate(items, 1):
            response += f"{i}. {'üîó ' + item['link'] + ' - ' if item.get('link') else ''}{item.get('description', '')}\n"
        
        bot.send_message(call.message.chat.id, response, parse_mode='Markdown')
    else:
        bot.send_message(call.message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥-—Å–ø–∏—Å–∫–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith('/') and not message.text.startswith('/start') and not message.text.startswith('/help') and not message.text.startswith('/mylists') and not message.text.startswith('/new') and not message.text.startswith('/my'))
def handle_list_command(message):
    try:
        command_parts = message.text.split(' ', 2)
        list_name = command_parts[0][1:].lower()  # –£–±–∏—Ä–∞–µ–º / –∏–∑ –Ω–∞—á–∞–ª–∞
        
        user_id = str(message.from_user.id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in users:
            users[user_id] = {
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'lists': {}
            }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if list_name not in users[user_id]['lists']:
            users[user_id]['lists'][list_name] = []
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        if len(command_parts) == 1:
            items = users[user_id]['lists'][list_name]
            if not items:
                bot.send_message(message.chat.id, f"üì≠ –°–ø–∏—Å–æ–∫ '{list_name}' –ø—É—Å—Ç.")
                return
            
            response = f"üìã **–°–ø–∏—Å–æ–∫: {list_name}**\n\n"
            for i, item in enumerate(items, 1):
                link_part = f"üîó {item['link']} - " if item.get('link') else ""
                response += f"{i}. {link_part}{item.get('description', '')}\n"
            
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        link = None
        description = ""
        
        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        if len(command_parts) >= 2:
            text_after_command = ' '.join(command_parts[1:])
            words = text_after_command.split()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å—Å—ã–ª–∫—É
            if words and (words[0].startswith('http://') or words[0].startswith('https://')):
                link = words[0]
                description = ' '.join(words[1:]) if len(words) > 1 else ""
            else:
                description = text_after_command
        
        new_item = {}
        if link:
            new_item['link'] = link
        if description:
            new_item['description'] = description
        
        users[user_id]['lists'][list_name].append(new_item)
        save_data(USERS_FILE, users)
        
        response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ '{list_name}':\n"
        if link:
            response += f"üîó {link}\n"
        if description:
            response += f"üìù {description}"
        
        bot.send_message(message.chat.id, response)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@bot.message_handler(commands=['newnotification'])
def new_notification(message):
    user_id = str(message.from_user.id)
    
    if user_id not in notifications:
        notifications[user_id] = []
    
    markup = types.ForceReply(selective=False)
    bot.send_message(message.chat.id, 
                    "‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è | –≤—Ä–µ–º—è`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                    "‚Ä¢ `15:30` - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
                    "‚Ä¢ `14:25 25.12` - 25 –¥–µ–∫–∞–±—Ä—è –≤ 14:25\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞` - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
                    "‚Ä¢ `—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç` - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", 
                    parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['mynotifications'])
def show_notifications(message):
    user_id = str(message.from_user.id)
    
    if user_id not in notifications or not notifications[user_id]:
        bot.send_message(message.chat.id, "üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return
    
    response = "‚è∞ **–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n\n"
    for i, notification in enumerate(notifications[user_id], 1):
        response += f"{i}. {notification['text']} - {notification['time']}\n"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    handle_notification_message(message, bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)

def check_notifications():
    handle_check_notifications(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_notification_checker():
    thread = threading.Thread(target=check_notifications, daemon=True)
    thread.start()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    start_notification_checker()
    bot.polling(none_stop=True)