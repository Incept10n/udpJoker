import telebot
from telebot import types
import json
import os
import threading
from datetime import datetime, timedelta
from help import handlel_send_help
from lists import handle_list_create_command, handle_show_list_callback, handle_show_my_lists
from notification import handle_check_notifications, handle_notification_reply, new_notification_handler, show_notifications_handler
from utils import load_data


TELEGRAM_API_TOKEN = os.environ['TELEGRAM_API_TOKEN']
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_API_TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
LISTS_FILE = 'lists.json'
NOTIFICATIONS_FILE = 'notifications.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
notifications = load_data(NOTIFICATIONS_FILE)
lists = load_data(LISTS_FILE)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/help')
    btn2 = types.KeyboardButton('/mylists')
    btn3 = types.KeyboardButton('/newnotification')
    btn4 = types.KeyboardButton('/mynotifications')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, 
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n\n"
                    "üìù –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /[–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞]\n"
                    "üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /newnotification\n"
                    "üìã –°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /mylists\n\n"
                    "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", 
                    reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_help(message):
    handlel_send_help(message, bot)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
@bot.message_handler(commands=['mylists'])
def show_my_lists(message):
    handle_show_my_lists(message, bot, lists)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('show_list_'))
def show_list_callback(call):
    handle_show_list_callback(call, lists, bot)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥-—Å–ø–∏—Å–∫–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ)
@bot.message_handler(func=lambda message: message.text.startswith('/') and not message.text.startswith('/start') and not message.text.startswith('/help') and not message.text.startswith('/mylists') and not message.text.startswith('/newnotification') and not message.text.startswith('/mynotifications'))
def handle_list_command(message):
    handle_list_create_command(message, lists, bot)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@bot.message_handler(commands=['newnotification'])
def new_notification(message):
    new_notification_handler(message, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ForceReply
@bot.message_handler(func=lambda message: message.reply_to_message is not None and 
                      "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" in message.reply_to_message.text)
def notification_reply(message):
    handle_notification_reply(message, bot)


@bot.message_handler(commands=['mynotifications'])
def show_notifications(message):
    show_notifications_handler(message, bot, notifications)


def check_notifications():
    handle_check_notifications(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_notification_checker():
    thread = threading.Thread(target=check_notifications, daemon=True)
    thread.start()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    start_notification_checker()
    bot.polling(none_stop=True)